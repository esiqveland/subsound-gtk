import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.gradleup.shadow' version '8.3.3'
    id 'java'
    id 'application'
    id 'io.github.jwharm.flatpak-gradle-generator' version '1.2.0'
    //    id 'androidx.room' version "2.7.0-alpha06" apply false
}

group = 'com.github.subsounds'
version = '0.1.0'
var mainClass = 'com.github.subsound.Main'

repositories {
    maven { url './offline-repository/' }
    mavenCentral()
    google()
}

def recordBuilderVersion = "43"

dependencies {
    implementation 'io.github.jwharm.javagi:gtk:0.10.2'
    implementation 'io.github.jwharm.javagi:adw:0.10.2'
    implementation 'io.github.jwharm.javagi:gst:0.10.2'

    implementation 'net.beardbot:subsonic-client:0.5.1'
    implementation "com.github.ben-manes.caffeine:caffeine:3.1.8"
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'de.androidpit:color-thief:1.1.2'

    annotationProcessor "io.soabase.record-builder:record-builder-processor:$recordBuilderVersion"
    compileOnly "io.soabase.record-builder:record-builder-core:$recordBuilderVersion"

    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'org.slf4j:jul-to-slf4j:2.0.12'
    implementation 'ch.qos.logback:logback-classic:1.5.6'

    implementation 'com.twelvemonkeys.imageio:imageio-core:3.11.0'
    implementation 'com.twelvemonkeys.imageio:imageio-metadata:3.11.0'
    // webp conversion support:
    implementation 'com.twelvemonkeys.imageio:imageio-webp:3.11.0'

    testImplementation 'org.assertj:assertj-core:3.25.1'
    testImplementation 'junit:junit:4.13.2'
}

// copy the Constants class and replace the version placeholder with the application version
tasks.register("processVersion", Copy) {
    from("src/main/java/com/github/subsound/configuration/constants/") {
        include("Constants.java")
        filter(ReplaceTokens, tokens: ['version': version])
    }
    into layout.buildDirectory.dir("generated/sources/classes/src/java/main/com/github/subsound/configuration/constants/")

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// exclude the original Constants class from the source set so gradle doesn't compile it in
sourceSets {
    main {
        java {
            exclude ("com/github/subsound/configuration/constants/Constants.java")
        }
    }
}

// include the new Constants class that was previously generated
tasks.named("compileJava", JavaCompile) {
    dependsOn("processVersion")
    source(layout.buildDirectory.dir("generated/sources/classes/src/java/main/com/github/subsound/configuration/constants/"))
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}
test {
    jvmArgs += "--enable-native-access=ALL-UNNAMED"
    useJUnit()

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    afterTest { desc, result ->
        def output = "Class name: ${desc.className}, Test name: ${desc.name},  (Test status: ${result.resultType})"
        println( '\n' + output)
    }

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}
tasks.named('run') {
    //jvmArgs += "-XstartOnFirstThread"
    jvmArgs += "--enable-native-access=ALL-UNNAMED"
    jvmArgs += "-Djava.library.path=/usr/lib64:/lib64:/lib:/usr/lib:/lib/x86_64-linux-gnu "
    //jvmArgs += "-Djava.library.path=/usr/lib64:/lib64:/lib:/usr/lib:/lib/x86_64-linux-gnu:/opt/homebrew/lib "
}

tasks.flatpakGradleGenerator {
    outputFile = file('flatpak-sources.json')
    downloadDirectory = './offline-repository'
}
application {
    setMainClass(mainClass)
}

shadowJar {
    archiveClassifier.set('final')
}

tasks.jar {
    manifest {
        attributes["Main-Class"] = mainClass;
    }
    dependsOn("shadowJar")
}
